// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: viewmodels.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DownloadImageViewModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var downloadTime: Double = 0

  var serializationTime: Double = 0

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DownloadAndResizeImageViewModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var downloadTime: Double = 0

  var resizeTime: Double = 0

  var serializationTime: Double = 0

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct JsonViewModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 = 0

  var title: String = String()

  var desc: String = String()

  var price: Int32 = 0

  var discountPercentage: Double = 0

  var rating: Double = 0

  var stock: Int32 = 0

  var brand: String = String()

  var category: String = String()

  var thumbnail: String = String()

  var images: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct JsonViewModels {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jsonTime: Double = 0

  var serializationTime: Double = 0

  var jsons: [JsonViewModel] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension DownloadImageViewModel: @unchecked Sendable {}
extension DownloadAndResizeImageViewModel: @unchecked Sendable {}
extension JsonViewModel: @unchecked Sendable {}
extension JsonViewModels: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DownloadImageViewModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DownloadImageViewModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "download_time"),
    2: .standard(proto: "serialization_time"),
    3: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.downloadTime) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.serializationTime) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.downloadTime != 0 {
      try visitor.visitSingularDoubleField(value: self.downloadTime, fieldNumber: 1)
    }
    if self.serializationTime != 0 {
      try visitor.visitSingularDoubleField(value: self.serializationTime, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DownloadImageViewModel, rhs: DownloadImageViewModel) -> Bool {
    if lhs.downloadTime != rhs.downloadTime {return false}
    if lhs.serializationTime != rhs.serializationTime {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DownloadAndResizeImageViewModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DownloadAndResizeImageViewModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "download_time"),
    2: .standard(proto: "resize_time"),
    3: .standard(proto: "serialization_time"),
    4: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.downloadTime) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.resizeTime) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.serializationTime) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.downloadTime != 0 {
      try visitor.visitSingularDoubleField(value: self.downloadTime, fieldNumber: 1)
    }
    if self.resizeTime != 0 {
      try visitor.visitSingularDoubleField(value: self.resizeTime, fieldNumber: 2)
    }
    if self.serializationTime != 0 {
      try visitor.visitSingularDoubleField(value: self.serializationTime, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DownloadAndResizeImageViewModel, rhs: DownloadAndResizeImageViewModel) -> Bool {
    if lhs.downloadTime != rhs.downloadTime {return false}
    if lhs.resizeTime != rhs.resizeTime {return false}
    if lhs.serializationTime != rhs.serializationTime {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JsonViewModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "JsonViewModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "title"),
    3: .same(proto: "desc"),
    4: .same(proto: "price"),
    5: .standard(proto: "discount_percentage"),
    6: .same(proto: "rating"),
    7: .same(proto: "stock"),
    8: .same(proto: "brand"),
    9: .same(proto: "category"),
    10: .same(proto: "thumbnail"),
    11: .same(proto: "images"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.desc) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.price) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.discountPercentage) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.rating) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.stock) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.brand) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.category) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.thumbnail) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &self.images) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.desc.isEmpty {
      try visitor.visitSingularStringField(value: self.desc, fieldNumber: 3)
    }
    if self.price != 0 {
      try visitor.visitSingularInt32Field(value: self.price, fieldNumber: 4)
    }
    if self.discountPercentage != 0 {
      try visitor.visitSingularDoubleField(value: self.discountPercentage, fieldNumber: 5)
    }
    if self.rating != 0 {
      try visitor.visitSingularDoubleField(value: self.rating, fieldNumber: 6)
    }
    if self.stock != 0 {
      try visitor.visitSingularInt32Field(value: self.stock, fieldNumber: 7)
    }
    if !self.brand.isEmpty {
      try visitor.visitSingularStringField(value: self.brand, fieldNumber: 8)
    }
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 9)
    }
    if !self.thumbnail.isEmpty {
      try visitor.visitSingularStringField(value: self.thumbnail, fieldNumber: 10)
    }
    if !self.images.isEmpty {
      try visitor.visitRepeatedStringField(value: self.images, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JsonViewModel, rhs: JsonViewModel) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.title != rhs.title {return false}
    if lhs.desc != rhs.desc {return false}
    if lhs.price != rhs.price {return false}
    if lhs.discountPercentage != rhs.discountPercentage {return false}
    if lhs.rating != rhs.rating {return false}
    if lhs.stock != rhs.stock {return false}
    if lhs.brand != rhs.brand {return false}
    if lhs.category != rhs.category {return false}
    if lhs.thumbnail != rhs.thumbnail {return false}
    if lhs.images != rhs.images {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JsonViewModels: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "JsonViewModels"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "json_time"),
    2: .standard(proto: "serialization_time"),
    3: .same(proto: "jsons"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.jsonTime) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.serializationTime) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.jsons) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.jsonTime != 0 {
      try visitor.visitSingularDoubleField(value: self.jsonTime, fieldNumber: 1)
    }
    if self.serializationTime != 0 {
      try visitor.visitSingularDoubleField(value: self.serializationTime, fieldNumber: 2)
    }
    if !self.jsons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.jsons, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: JsonViewModels, rhs: JsonViewModels) -> Bool {
    if lhs.jsonTime != rhs.jsonTime {return false}
    if lhs.serializationTime != rhs.serializationTime {return false}
    if lhs.jsons != rhs.jsons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
