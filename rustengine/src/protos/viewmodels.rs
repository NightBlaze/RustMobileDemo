// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `viewmodels.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DownloadImageViewModel)
pub struct DownloadImageViewModel {
    // message fields
    // @@protoc_insertion_point(field:DownloadImageViewModel.download_time)
    pub download_time: f64,
    // @@protoc_insertion_point(field:DownloadImageViewModel.serialization_time)
    pub serialization_time: f64,
    // @@protoc_insertion_point(field:DownloadImageViewModel.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:DownloadImageViewModel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadImageViewModel {
    fn default() -> &'a DownloadImageViewModel {
        <DownloadImageViewModel as ::protobuf::Message>::default_instance()
    }
}

impl DownloadImageViewModel {
    pub fn new() -> DownloadImageViewModel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "download_time",
            |m: &DownloadImageViewModel| { &m.download_time },
            |m: &mut DownloadImageViewModel| { &mut m.download_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serialization_time",
            |m: &DownloadImageViewModel| { &m.serialization_time },
            |m: &mut DownloadImageViewModel| { &mut m.serialization_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &DownloadImageViewModel| { &m.data },
            |m: &mut DownloadImageViewModel| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadImageViewModel>(
            "DownloadImageViewModel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadImageViewModel {
    const NAME: &'static str = "DownloadImageViewModel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.download_time = is.read_double()?;
                },
                17 => {
                    self.serialization_time = is.read_double()?;
                },
                26 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.download_time != 0. {
            my_size += 1 + 8;
        }
        if self.serialization_time != 0. {
            my_size += 1 + 8;
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.download_time != 0. {
            os.write_double(1, self.download_time)?;
        }
        if self.serialization_time != 0. {
            os.write_double(2, self.serialization_time)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadImageViewModel {
        DownloadImageViewModel::new()
    }

    fn clear(&mut self) {
        self.download_time = 0.;
        self.serialization_time = 0.;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadImageViewModel {
        static instance: DownloadImageViewModel = DownloadImageViewModel {
            download_time: 0.,
            serialization_time: 0.,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadImageViewModel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadImageViewModel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadImageViewModel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadImageViewModel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:DownloadAndResizeImageViewModel)
pub struct DownloadAndResizeImageViewModel {
    // message fields
    // @@protoc_insertion_point(field:DownloadAndResizeImageViewModel.download_time)
    pub download_time: f64,
    // @@protoc_insertion_point(field:DownloadAndResizeImageViewModel.resize_time)
    pub resize_time: f64,
    // @@protoc_insertion_point(field:DownloadAndResizeImageViewModel.serialization_time)
    pub serialization_time: f64,
    // @@protoc_insertion_point(field:DownloadAndResizeImageViewModel.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:DownloadAndResizeImageViewModel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DownloadAndResizeImageViewModel {
    fn default() -> &'a DownloadAndResizeImageViewModel {
        <DownloadAndResizeImageViewModel as ::protobuf::Message>::default_instance()
    }
}

impl DownloadAndResizeImageViewModel {
    pub fn new() -> DownloadAndResizeImageViewModel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "download_time",
            |m: &DownloadAndResizeImageViewModel| { &m.download_time },
            |m: &mut DownloadAndResizeImageViewModel| { &mut m.download_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resize_time",
            |m: &DownloadAndResizeImageViewModel| { &m.resize_time },
            |m: &mut DownloadAndResizeImageViewModel| { &mut m.resize_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serialization_time",
            |m: &DownloadAndResizeImageViewModel| { &m.serialization_time },
            |m: &mut DownloadAndResizeImageViewModel| { &mut m.serialization_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &DownloadAndResizeImageViewModel| { &m.data },
            |m: &mut DownloadAndResizeImageViewModel| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DownloadAndResizeImageViewModel>(
            "DownloadAndResizeImageViewModel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DownloadAndResizeImageViewModel {
    const NAME: &'static str = "DownloadAndResizeImageViewModel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.download_time = is.read_double()?;
                },
                17 => {
                    self.resize_time = is.read_double()?;
                },
                25 => {
                    self.serialization_time = is.read_double()?;
                },
                34 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.download_time != 0. {
            my_size += 1 + 8;
        }
        if self.resize_time != 0. {
            my_size += 1 + 8;
        }
        if self.serialization_time != 0. {
            my_size += 1 + 8;
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.download_time != 0. {
            os.write_double(1, self.download_time)?;
        }
        if self.resize_time != 0. {
            os.write_double(2, self.resize_time)?;
        }
        if self.serialization_time != 0. {
            os.write_double(3, self.serialization_time)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DownloadAndResizeImageViewModel {
        DownloadAndResizeImageViewModel::new()
    }

    fn clear(&mut self) {
        self.download_time = 0.;
        self.resize_time = 0.;
        self.serialization_time = 0.;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DownloadAndResizeImageViewModel {
        static instance: DownloadAndResizeImageViewModel = DownloadAndResizeImageViewModel {
            download_time: 0.,
            resize_time: 0.,
            serialization_time: 0.,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DownloadAndResizeImageViewModel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DownloadAndResizeImageViewModel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DownloadAndResizeImageViewModel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownloadAndResizeImageViewModel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:JsonViewModel)
pub struct JsonViewModel {
    // message fields
    // @@protoc_insertion_point(field:JsonViewModel.id)
    pub id: i32,
    // @@protoc_insertion_point(field:JsonViewModel.title)
    pub title: ::std::string::String,
    // @@protoc_insertion_point(field:JsonViewModel.desc)
    pub desc: ::std::string::String,
    // @@protoc_insertion_point(field:JsonViewModel.price)
    pub price: i32,
    // @@protoc_insertion_point(field:JsonViewModel.discount_percentage)
    pub discount_percentage: f64,
    // @@protoc_insertion_point(field:JsonViewModel.rating)
    pub rating: f64,
    // @@protoc_insertion_point(field:JsonViewModel.stock)
    pub stock: i32,
    // @@protoc_insertion_point(field:JsonViewModel.brand)
    pub brand: ::std::string::String,
    // @@protoc_insertion_point(field:JsonViewModel.category)
    pub category: ::std::string::String,
    // @@protoc_insertion_point(field:JsonViewModel.thumbnail)
    pub thumbnail: ::std::string::String,
    // @@protoc_insertion_point(field:JsonViewModel.images)
    pub images: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:JsonViewModel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JsonViewModel {
    fn default() -> &'a JsonViewModel {
        <JsonViewModel as ::protobuf::Message>::default_instance()
    }
}

impl JsonViewModel {
    pub fn new() -> JsonViewModel {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &JsonViewModel| { &m.id },
            |m: &mut JsonViewModel| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &JsonViewModel| { &m.title },
            |m: &mut JsonViewModel| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "desc",
            |m: &JsonViewModel| { &m.desc },
            |m: &mut JsonViewModel| { &mut m.desc },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &JsonViewModel| { &m.price },
            |m: &mut JsonViewModel| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "discount_percentage",
            |m: &JsonViewModel| { &m.discount_percentage },
            |m: &mut JsonViewModel| { &mut m.discount_percentage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rating",
            |m: &JsonViewModel| { &m.rating },
            |m: &mut JsonViewModel| { &mut m.rating },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stock",
            |m: &JsonViewModel| { &m.stock },
            |m: &mut JsonViewModel| { &mut m.stock },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "brand",
            |m: &JsonViewModel| { &m.brand },
            |m: &mut JsonViewModel| { &mut m.brand },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &JsonViewModel| { &m.category },
            |m: &mut JsonViewModel| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thumbnail",
            |m: &JsonViewModel| { &m.thumbnail },
            |m: &mut JsonViewModel| { &mut m.thumbnail },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "images",
            |m: &JsonViewModel| { &m.images },
            |m: &mut JsonViewModel| { &mut m.images },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JsonViewModel>(
            "JsonViewModel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JsonViewModel {
    const NAME: &'static str = "JsonViewModel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int32()?;
                },
                18 => {
                    self.title = is.read_string()?;
                },
                26 => {
                    self.desc = is.read_string()?;
                },
                32 => {
                    self.price = is.read_int32()?;
                },
                41 => {
                    self.discount_percentage = is.read_double()?;
                },
                49 => {
                    self.rating = is.read_double()?;
                },
                56 => {
                    self.stock = is.read_int32()?;
                },
                66 => {
                    self.brand = is.read_string()?;
                },
                74 => {
                    self.category = is.read_string()?;
                },
                82 => {
                    self.thumbnail = is.read_string()?;
                },
                90 => {
                    self.images.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.id);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.desc.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.desc);
        }
        if self.price != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.price);
        }
        if self.discount_percentage != 0. {
            my_size += 1 + 8;
        }
        if self.rating != 0. {
            my_size += 1 + 8;
        }
        if self.stock != 0 {
            my_size += ::protobuf::rt::int32_size(7, self.stock);
        }
        if !self.brand.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.brand);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.category);
        }
        if !self.thumbnail.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.thumbnail);
        }
        for value in &self.images {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.desc.is_empty() {
            os.write_string(3, &self.desc)?;
        }
        if self.price != 0 {
            os.write_int32(4, self.price)?;
        }
        if self.discount_percentage != 0. {
            os.write_double(5, self.discount_percentage)?;
        }
        if self.rating != 0. {
            os.write_double(6, self.rating)?;
        }
        if self.stock != 0 {
            os.write_int32(7, self.stock)?;
        }
        if !self.brand.is_empty() {
            os.write_string(8, &self.brand)?;
        }
        if !self.category.is_empty() {
            os.write_string(9, &self.category)?;
        }
        if !self.thumbnail.is_empty() {
            os.write_string(10, &self.thumbnail)?;
        }
        for v in &self.images {
            os.write_string(11, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JsonViewModel {
        JsonViewModel::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.title.clear();
        self.desc.clear();
        self.price = 0;
        self.discount_percentage = 0.;
        self.rating = 0.;
        self.stock = 0;
        self.brand.clear();
        self.category.clear();
        self.thumbnail.clear();
        self.images.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JsonViewModel {
        static instance: JsonViewModel = JsonViewModel {
            id: 0,
            title: ::std::string::String::new(),
            desc: ::std::string::String::new(),
            price: 0,
            discount_percentage: 0.,
            rating: 0.,
            stock: 0,
            brand: ::std::string::String::new(),
            category: ::std::string::String::new(),
            thumbnail: ::std::string::String::new(),
            images: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JsonViewModel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JsonViewModel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JsonViewModel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JsonViewModel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:JsonViewModels)
pub struct JsonViewModels {
    // message fields
    // @@protoc_insertion_point(field:JsonViewModels.json_time)
    pub json_time: f64,
    // @@protoc_insertion_point(field:JsonViewModels.serialization_time)
    pub serialization_time: f64,
    // @@protoc_insertion_point(field:JsonViewModels.jsons)
    pub jsons: ::std::vec::Vec<JsonViewModel>,
    // special fields
    // @@protoc_insertion_point(special_field:JsonViewModels.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a JsonViewModels {
    fn default() -> &'a JsonViewModels {
        <JsonViewModels as ::protobuf::Message>::default_instance()
    }
}

impl JsonViewModels {
    pub fn new() -> JsonViewModels {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "json_time",
            |m: &JsonViewModels| { &m.json_time },
            |m: &mut JsonViewModels| { &mut m.json_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serialization_time",
            |m: &JsonViewModels| { &m.serialization_time },
            |m: &mut JsonViewModels| { &mut m.serialization_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "jsons",
            |m: &JsonViewModels| { &m.jsons },
            |m: &mut JsonViewModels| { &mut m.jsons },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<JsonViewModels>(
            "JsonViewModels",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for JsonViewModels {
    const NAME: &'static str = "JsonViewModels";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.json_time = is.read_double()?;
                },
                17 => {
                    self.serialization_time = is.read_double()?;
                },
                26 => {
                    self.jsons.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.json_time != 0. {
            my_size += 1 + 8;
        }
        if self.serialization_time != 0. {
            my_size += 1 + 8;
        }
        for value in &self.jsons {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.json_time != 0. {
            os.write_double(1, self.json_time)?;
        }
        if self.serialization_time != 0. {
            os.write_double(2, self.serialization_time)?;
        }
        for v in &self.jsons {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> JsonViewModels {
        JsonViewModels::new()
    }

    fn clear(&mut self) {
        self.json_time = 0.;
        self.serialization_time = 0.;
        self.jsons.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static JsonViewModels {
        static instance: JsonViewModels = JsonViewModels {
            json_time: 0.,
            serialization_time: 0.,
            jsons: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for JsonViewModels {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("JsonViewModels").unwrap()).clone()
    }
}

impl ::std::fmt::Display for JsonViewModels {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JsonViewModels {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10viewmodels.proto\"\x80\x01\n\x16DownloadImageViewModel\x12#\n\rdow\
    nload_time\x18\x01\x20\x01(\x01R\x0cdownloadTime\x12-\n\x12serialization\
    _time\x18\x02\x20\x01(\x01R\x11serializationTime\x12\x12\n\x04data\x18\
    \x03\x20\x01(\x0cR\x04data\"\xaa\x01\n\x1fDownloadAndResizeImageViewMode\
    l\x12#\n\rdownload_time\x18\x01\x20\x01(\x01R\x0cdownloadTime\x12\x1f\n\
    \x0bresize_time\x18\x02\x20\x01(\x01R\nresizeTime\x12-\n\x12serializatio\
    n_time\x18\x03\x20\x01(\x01R\x11serializationTime\x12\x12\n\x04data\x18\
    \x04\x20\x01(\x0cR\x04data\"\xa6\x02\n\rJsonViewModel\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\x05R\x02id\x12\x14\n\x05title\x18\x02\x20\x01(\tR\x05t\
    itle\x12\x12\n\x04desc\x18\x03\x20\x01(\tR\x04desc\x12\x14\n\x05price\
    \x18\x04\x20\x01(\x05R\x05price\x12/\n\x13discount_percentage\x18\x05\
    \x20\x01(\x01R\x12discountPercentage\x12\x16\n\x06rating\x18\x06\x20\x01\
    (\x01R\x06rating\x12\x14\n\x05stock\x18\x07\x20\x01(\x05R\x05stock\x12\
    \x14\n\x05brand\x18\x08\x20\x01(\tR\x05brand\x12\x1a\n\x08category\x18\t\
    \x20\x01(\tR\x08category\x12\x1c\n\tthumbnail\x18\n\x20\x01(\tR\tthumbna\
    il\x12\x16\n\x06images\x18\x0b\x20\x03(\tR\x06images\"\x82\x01\n\x0eJson\
    ViewModels\x12\x1b\n\tjson_time\x18\x01\x20\x01(\x01R\x08jsonTime\x12-\n\
    \x12serialization_time\x18\x02\x20\x01(\x01R\x11serializationTime\x12$\n\
    \x05jsons\x18\x03\x20\x03(\x0b2\x0e.JsonViewModelR\x05jsonsB\tZ\x07/prot\
    osJ\xa6\n\n\x06\x12\x04\0\0\"\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x08\x12\x03\x01\0\x1e\n\t\n\x02\x08\x0b\x12\x03\x01\0\x1e\n\n\n\
    \x02\x04\0\x12\x04\x03\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x1e\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x04\x04\x1d\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x04\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x04\x0b\x18\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x04\x1b\x1c\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x05\x04\"\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x05\x04\n\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x05\x0b\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x05\x20!\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x04\x13\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\x06\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x06\n\x0e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x11\x12\n\n\
    \n\x02\x04\x01\x12\x04\t\0\x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08'\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x04\x1d\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x0b\x18\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\n\x1b\x1c\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\x0b\x04\x1b\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x04\
    \n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\x0b\x16\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x0b\x19\x1a\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\
    \x0c\x04\"\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x0c\x0b\x1d\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x0c\x20!\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\r\x04\x13\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03\r\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\r\n\x0e\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\r\x11\x12\n\n\n\
    \x02\x04\x02\x12\x04\x10\0\x1c\x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\
    \x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x04\x11\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x11\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x11\n\
    \x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x11\x0f\x10\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x12\x04\x15\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x12\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x12\x0b\x10\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x12\x13\x14\n\x0b\n\x04\x04\x02\x02\x02\
    \x12\x03\x13\x04\x14\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x13\x04\n\n\
    \x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x13\x0b\x0f\n\x0c\n\x05\x04\x02\
    \x02\x02\x03\x12\x03\x13\x12\x13\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x14\
    \x04\x14\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x14\x04\t\n\x0c\n\x05\
    \x04\x02\x02\x03\x01\x12\x03\x14\n\x0f\n\x0c\n\x05\x04\x02\x02\x03\x03\
    \x12\x03\x14\x12\x13\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x15\x04#\n\x0c\
    \n\x05\x04\x02\x02\x04\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03\x15\x0b\x1e\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x15!\"\
    \n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x16\x04\x16\n\x0c\n\x05\x04\x02\x02\
    \x05\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x16\
    \x0b\x11\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03\x16\x14\x15\n\x0b\n\x04\
    \x04\x02\x02\x06\x12\x03\x17\x04\x14\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\
    \x03\x17\x04\t\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x03\x17\n\x0f\n\x0c\n\
    \x05\x04\x02\x02\x06\x03\x12\x03\x17\x12\x13\n\x0b\n\x04\x04\x02\x02\x07\
    \x12\x03\x18\x04\x15\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03\x18\x04\n\n\
    \x0c\n\x05\x04\x02\x02\x07\x01\x12\x03\x18\x0b\x10\n\x0c\n\x05\x04\x02\
    \x02\x07\x03\x12\x03\x18\x13\x14\n\x0b\n\x04\x04\x02\x02\x08\x12\x03\x19\
    \x04\x18\n\x0c\n\x05\x04\x02\x02\x08\x05\x12\x03\x19\x04\n\n\x0c\n\x05\
    \x04\x02\x02\x08\x01\x12\x03\x19\x0b\x13\n\x0c\n\x05\x04\x02\x02\x08\x03\
    \x12\x03\x19\x16\x17\n\x0b\n\x04\x04\x02\x02\t\x12\x03\x1a\x04\x1a\n\x0c\
    \n\x05\x04\x02\x02\t\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\x02\x02\t\x01\
    \x12\x03\x1a\x0b\x14\n\x0c\n\x05\x04\x02\x02\t\x03\x12\x03\x1a\x17\x19\n\
    \x0b\n\x04\x04\x02\x02\n\x12\x03\x1b\x04\x20\n\x0c\n\x05\x04\x02\x02\n\
    \x04\x12\x03\x1b\x04\x0c\n\x0c\n\x05\x04\x02\x02\n\x05\x12\x03\x1b\r\x13\
    \n\x0c\n\x05\x04\x02\x02\n\x01\x12\x03\x1b\x14\x1a\n\x0c\n\x05\x04\x02\
    \x02\n\x03\x12\x03\x1b\x1d\x1f\n\n\n\x02\x04\x03\x12\x04\x1e\0\"\x01\n\n\
    \n\x03\x04\x03\x01\x12\x03\x1e\x08\x16\n\x0b\n\x04\x04\x03\x02\0\x12\x03\
    \x1f\x04\x19\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x1f\x0b\x14\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x1f\x17\x18\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x20\x04\"\n\x0c\n\
    \x05\x04\x03\x02\x01\x05\x12\x03\x20\x04\n\n\x0c\n\x05\x04\x03\x02\x01\
    \x01\x12\x03\x20\x0b\x1d\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x20\x20\
    !\n\x0b\n\x04\x04\x03\x02\x02\x12\x03!\x04%\n\x0c\n\x05\x04\x03\x02\x02\
    \x04\x12\x03!\x04\x0c\n\x0c\n\x05\x04\x03\x02\x02\x06\x12\x03!\r\x1a\n\
    \x0c\n\x05\x04\x03\x02\x02\x01\x12\x03!\x1b\x20\n\x0c\n\x05\x04\x03\x02\
    \x02\x03\x12\x03!#$b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(DownloadImageViewModel::generated_message_descriptor_data());
            messages.push(DownloadAndResizeImageViewModel::generated_message_descriptor_data());
            messages.push(JsonViewModel::generated_message_descriptor_data());
            messages.push(JsonViewModels::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
